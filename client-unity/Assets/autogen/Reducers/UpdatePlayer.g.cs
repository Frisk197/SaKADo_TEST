// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 4b41cf3d71aa85cd4e75c96cbb54324481ee0b27).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdatePlayerHandler(ReducerEventContext ctx, DbVector3 headPosition, DbQuaternion headRotation, ControllerInput leftController, ControllerInput rightController);
        public event UpdatePlayerHandler? OnUpdatePlayer;

        public void UpdatePlayer(DbVector3 headPosition, DbQuaternion headRotation, ControllerInput leftController, ControllerInput rightController)
        {
            conn.InternalCallReducer(new Reducer.UpdatePlayer(headPosition, headRotation, leftController, rightController), this.SetCallReducerFlags.UpdatePlayerFlags);
        }

        public bool InvokeUpdatePlayer(ReducerEventContext ctx, Reducer.UpdatePlayer args)
        {
            if (OnUpdatePlayer == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnUpdatePlayer(
                ctx,
                args.HeadPosition,
                args.HeadRotation,
                args.LeftController,
                args.RightController
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdatePlayer : Reducer, IReducerArgs
        {
            [DataMember(Name = "head_position")]
            public DbVector3 HeadPosition;
            [DataMember(Name = "head_rotation")]
            public DbQuaternion HeadRotation;
            [DataMember(Name = "left_controller")]
            public ControllerInput LeftController;
            [DataMember(Name = "right_controller")]
            public ControllerInput RightController;

            public UpdatePlayer(
                DbVector3 HeadPosition,
                DbQuaternion HeadRotation,
                ControllerInput LeftController,
                ControllerInput RightController
            )
            {
                this.HeadPosition = HeadPosition;
                this.HeadRotation = HeadRotation;
                this.LeftController = LeftController;
                this.RightController = RightController;
            }

            public UpdatePlayer()
            {
                this.HeadPosition = new();
                this.HeadRotation = new();
                this.LeftController = new();
                this.RightController = new();
            }

            string IReducerArgs.ReducerName => "update_player";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdatePlayerFlags;
        public void UpdatePlayer(CallReducerFlags flags) => UpdatePlayerFlags = flags;
    }
}
